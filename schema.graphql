### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input IntFieldUpdateOperationsInput {
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

type Mutation {
  bookWorkout(traineeId: Int!, workoutId: Int!): User
  createOneUser(data: UserCreateInput!): User!
  createOneWorkout(data: WorkoutCreateInput!): Workout!
  deleteBookedWorkout(traineeId: Int!, workoutId: Int!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyWorkout(data: WorkoutUpdateManyMutationInput!, where: WorkoutWhereInput): BatchPayload!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneWorkout(data: WorkoutUpdateInput!, where: WorkoutWhereUniqueInput!): Workout
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

type Query {
  todayWorkouts: [Workout]
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  workout(where: WorkoutWhereUniqueInput!): Workout
  workouts(after: WorkoutWhereUniqueInput, before: WorkoutWhereUniqueInput, first: Int, last: Int, orderBy: [WorkoutOrderByInput], where: WorkoutWhereInput): [Workout!]!
  workoutsPerWeek: [Workout]
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

type User {
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  left: Int!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  left: Int
  Workout: WorkoutCreateManyWithoutTraineesInput
}

input UserCreateManyWithoutWorkoutInput {
  connect: [UserWhereUniqueInput]
  create: [UserCreateWithoutWorkoutInput]
}

input UserCreateWithoutWorkoutInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  left: Int
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
  left: IntFilter
  NOT: [UserScalarWhereInput]
  OR: [UserScalarWhereInput]
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  left: IntFieldUpdateOperationsInput
  Workout: WorkoutUpdateManyWithoutTraineesInput
}

input UserUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  left: IntFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  left: IntFieldUpdateOperationsInput
}

input UserUpdateManyWithoutWorkoutInput {
  connect: [UserWhereUniqueInput]
  create: [UserCreateWithoutWorkoutInput]
  delete: [UserWhereUniqueInput]
  deleteMany: [UserScalarWhereInput]
  disconnect: [UserWhereUniqueInput]
  set: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutWorkoutInput]
  updateMany: [UserUpdateManyWithWhereNestedInput]
  upsert: [UserUpsertWithWhereUniqueWithoutWorkoutInput]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateWithoutWorkoutDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  left: IntFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutWorkoutInput {
  data: UserUpdateWithoutWorkoutDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutWorkoutInput {
  create: UserCreateWithoutWorkoutInput!
  update: UserUpdateWithoutWorkoutDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
  left: IntFilter
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  Workout: WorkoutListRelationFilter
}

input UserWhereUniqueInput {
  id: Int
}

type Workout {
  date: String!
  id: Int!
  status: WorkoutStatus!
  time: String!
  trainees(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
  type: WorkoutType!
}

input Workout_date_time_uniqueCompoundUniqueInput {
  date: String!
  time: String!
}

input WorkoutCreateInput {
  date: String!
  status: WorkoutStatus!
  time: String!
  trainees: UserCreateManyWithoutWorkoutInput
  type: WorkoutType!
}

input WorkoutCreateManyWithoutTraineesInput {
  connect: [WorkoutWhereUniqueInput]
  create: [WorkoutCreateWithoutTraineesInput]
}

input WorkoutCreateWithoutTraineesInput {
  date: String!
  status: WorkoutStatus!
  time: String!
  type: WorkoutType!
}

input WorkoutListRelationFilter {
  every: WorkoutWhereInput
  none: WorkoutWhereInput
  some: WorkoutWhereInput
}

input WorkoutOrderByInput {
  date: SortOrder
  id: SortOrder
  status: SortOrder
  time: SortOrder
  type: SortOrder
}

input WorkoutScalarWhereInput {
  AND: [WorkoutScalarWhereInput]
  date: StringFilter
  id: IntFilter
  NOT: [WorkoutScalarWhereInput]
  OR: [WorkoutScalarWhereInput]
  status: WorkoutStatus
  time: StringFilter
  type: WorkoutType
}

enum WorkoutStatus {
  Active
  Cancelled
  Over
}

enum WorkoutType {
  PERSONAL
  TEAM
}

input WorkoutUpdateInput {
  date: StringFieldUpdateOperationsInput
  status: WorkoutStatus
  time: StringFieldUpdateOperationsInput
  trainees: UserUpdateManyWithoutWorkoutInput
  type: WorkoutType
}

input WorkoutUpdateManyDataInput {
  date: StringFieldUpdateOperationsInput
  status: WorkoutStatus
  time: StringFieldUpdateOperationsInput
  type: WorkoutType
}

input WorkoutUpdateManyMutationInput {
  date: StringFieldUpdateOperationsInput
  status: WorkoutStatus
  time: StringFieldUpdateOperationsInput
  type: WorkoutType
}

input WorkoutUpdateManyWithoutTraineesInput {
  connect: [WorkoutWhereUniqueInput]
  create: [WorkoutCreateWithoutTraineesInput]
  delete: [WorkoutWhereUniqueInput]
  deleteMany: [WorkoutScalarWhereInput]
  disconnect: [WorkoutWhereUniqueInput]
  set: [WorkoutWhereUniqueInput]
  update: [WorkoutUpdateWithWhereUniqueWithoutTraineesInput]
  updateMany: [WorkoutUpdateManyWithWhereNestedInput]
  upsert: [WorkoutUpsertWithWhereUniqueWithoutTraineesInput]
}

input WorkoutUpdateManyWithWhereNestedInput {
  data: WorkoutUpdateManyDataInput!
  where: WorkoutScalarWhereInput!
}

input WorkoutUpdateWithoutTraineesDataInput {
  date: StringFieldUpdateOperationsInput
  status: WorkoutStatus
  time: StringFieldUpdateOperationsInput
  type: WorkoutType
}

input WorkoutUpdateWithWhereUniqueWithoutTraineesInput {
  data: WorkoutUpdateWithoutTraineesDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutUpsertWithWhereUniqueWithoutTraineesInput {
  create: WorkoutCreateWithoutTraineesInput!
  update: WorkoutUpdateWithoutTraineesDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutWhereInput {
  AND: [WorkoutWhereInput]
  date: StringFilter
  id: IntFilter
  NOT: [WorkoutWhereInput]
  OR: [WorkoutWhereInput]
  status: WorkoutStatus
  time: StringFilter
  trainees: UserListRelationFilter
  type: WorkoutType
}

input WorkoutWhereUniqueInput {
  id: Int
  Workout_date_time_unique: Workout_date_time_uniqueCompoundUniqueInput
}
