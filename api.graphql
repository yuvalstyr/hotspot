### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeCompoundUniqueInput {
  date: String!
  time: String!
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createOneWorkout(data: WorkoutCreateInput!): Workout!
  updateManyWorkout(data: WorkoutUpdateManyMutationInput!, where: WorkoutWhereInput): BatchPayload!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneWorkout(data: WorkoutUpdateInput!, where: WorkoutWhereUniqueInput!): Workout
}

type Query {
  todayWorkouts: [Workout!]
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  workout(where: WorkoutWhereUniqueInput!): Workout
  workouts(after: WorkoutWhereUniqueInput, before: WorkoutWhereUniqueInput, first: Int, last: Int, orderBy: [WorkoutOrderByInput!], where: WorkoutWhereInput): [Workout!]!
  workoutsPerWeek: [Workout!]
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  left: Int!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  history: WorkoutCreateManyWithoutTraineesInput
  lastName: String!
  left: Int
}

input UserCreateManyWithoutHistoryInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHistoryInput!]
}

input UserCreateWithoutHistoryInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  left: Int
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  history: WorkoutFilter
  id: IntFilter
  lastName: StringFilter
  left: IntFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
}

input UserUpdateInput {
  createdAt: DateTime
  email: String
  firstName: String
  history: WorkoutUpdateManyWithoutTraineesInput
  lastName: String
  left: Int
}

input UserUpdateManyDataInput {
  createdAt: DateTime
  email: String
  firstName: String
  lastName: String
  left: Int
}

input UserUpdateManyWithoutHistoryInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutHistoryInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutHistoryInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutHistoryInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateWithoutHistoryDataInput {
  createdAt: DateTime
  email: String
  firstName: String
  lastName: String
  left: Int
}

input UserUpdateWithWhereUniqueWithoutHistoryInput {
  data: UserUpdateWithoutHistoryDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutHistoryInput {
  create: UserCreateWithoutHistoryInput!
  update: UserUpdateWithoutHistoryDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  history: WorkoutFilter
  id: IntFilter
  lastName: StringFilter
  left: IntFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}

type Workout {
  date: String!
  id: Int!
  status: WorkoutStatus!
  time: String!
  trainees(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
  type: WorkoutType!
}

input WorkoutCreateInput {
  date: String!
  status: WorkoutStatus!
  time: String!
  trainees: UserCreateManyWithoutHistoryInput
  type: WorkoutType!
}

input WorkoutCreateManyWithoutTraineesInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutTraineesInput!]
}

input WorkoutCreateWithoutTraineesInput {
  date: String!
  status: WorkoutStatus!
  time: String!
  type: WorkoutType!
}

input WorkoutFilter {
  every: WorkoutWhereInput
  none: WorkoutWhereInput
  some: WorkoutWhereInput
}

input WorkoutOrderByInput {
  date: SortOrder
  id: SortOrder
  status: SortOrder
  time: SortOrder
  type: SortOrder
}

input WorkoutScalarWhereInput {
  AND: [WorkoutScalarWhereInput!]
  date: StringFilter
  id: IntFilter
  NOT: [WorkoutScalarWhereInput!]
  OR: [WorkoutScalarWhereInput!]
  status: WorkoutStatus
  time: StringFilter
  trainees: UserFilter
  type: WorkoutType
}

enum WorkoutStatus {
  Active
  Cancelled
  Over
}

enum WorkoutType {
  PERSONAL
  TEAM
}

input WorkoutUpdateInput {
  date: String
  status: WorkoutStatus
  time: String
  trainees: UserUpdateManyWithoutHistoryInput
  type: WorkoutType
}

input WorkoutUpdateManyDataInput {
  date: String
  status: WorkoutStatus
  time: String
  type: WorkoutType
}

input WorkoutUpdateManyMutationInput {
  date: String
  status: WorkoutStatus
  time: String
  type: WorkoutType
}

input WorkoutUpdateManyWithoutTraineesInput {
  connect: [WorkoutWhereUniqueInput!]
  create: [WorkoutCreateWithoutTraineesInput!]
  delete: [WorkoutWhereUniqueInput!]
  deleteMany: [WorkoutScalarWhereInput!]
  disconnect: [WorkoutWhereUniqueInput!]
  set: [WorkoutWhereUniqueInput!]
  update: [WorkoutUpdateWithWhereUniqueWithoutTraineesInput!]
  updateMany: [WorkoutUpdateManyWithWhereNestedInput!]
  upsert: [WorkoutUpsertWithWhereUniqueWithoutTraineesInput!]
}

input WorkoutUpdateManyWithWhereNestedInput {
  data: WorkoutUpdateManyDataInput!
  where: WorkoutScalarWhereInput!
}

input WorkoutUpdateWithoutTraineesDataInput {
  date: String
  status: WorkoutStatus
  time: String
  type: WorkoutType
}

input WorkoutUpdateWithWhereUniqueWithoutTraineesInput {
  data: WorkoutUpdateWithoutTraineesDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutUpsertWithWhereUniqueWithoutTraineesInput {
  create: WorkoutCreateWithoutTraineesInput!
  update: WorkoutUpdateWithoutTraineesDataInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutWhereInput {
  AND: [WorkoutWhereInput!]
  date: StringFilter
  id: IntFilter
  NOT: [WorkoutWhereInput!]
  OR: [WorkoutWhereInput!]
  status: WorkoutStatus
  time: StringFilter
  trainees: UserFilter
  type: WorkoutType
}

input WorkoutWhereUniqueInput {
  date_time: DateTimeCompoundUniqueInput
  id: Int
}
