/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  User: { // root type
    email?: string | null; // String
    firstName?: string | null; // String
    id?: number | null; // Int
    lastName?: string | null; // String
    left?: number | null; // Int
    name?: string | null; // String
  }
  Workout: { // root type
    date?: string | null; // String
    id?: number | null; // Int
    status?: string | null; // String
    time?: string | null; // String
    type?: string | null; // String
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    bookWorkout: NexusGenRootTypes['User'] | null; // User
    deleteBookedWorkout: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    todayWorkouts: Array<NexusGenRootTypes['Workout'] | null> | null; // [Workout]
    workouts: Array<NexusGenRootTypes['Workout'] | null> | null; // [Workout]
    workoutsPerWeek: Array<NexusGenRootTypes['Workout'] | null> | null; // [Workout]
  }
  User: { // field return type
    email: string | null; // String
    firstName: string | null; // String
    id: number | null; // Int
    lastName: string | null; // String
    left: number | null; // Int
    name: string | null; // String
  }
  Workout: { // field return type
    date: string | null; // String
    id: number | null; // Int
    status: string | null; // String
    time: string | null; // String
    trainees: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    type: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    bookWorkout: { // args
      traineeId: number; // Int!
      workoutId: number; // Int!
    }
    deleteBookedWorkout: { // args
      traineeId: number; // Int!
      workoutId: number; // Int!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "User" | "Workout";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}