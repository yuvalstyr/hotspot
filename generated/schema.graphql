### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumWorkoutStatusFieldUpdateOperationsInput {
  set: WorkoutStatus
}

input EnumWorkoutStatusFilter {
  equals: WorkoutStatus
  in: [WorkoutStatus!]
  not: NestedEnumWorkoutStatusFilter
  notIn: [WorkoutStatus!]
}

input EnumWorkoutTypeFieldUpdateOperationsInput {
  set: WorkoutType
}

input EnumWorkoutTypeFilter {
  equals: WorkoutType
  in: [WorkoutType!]
  not: NestedEnumWorkoutTypeFilter
  notIn: [WorkoutType!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteAllUsers: String
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumWorkoutStatusFilter {
  equals: WorkoutStatus
  in: [WorkoutStatus!]
  not: NestedEnumWorkoutStatusFilter
  notIn: [WorkoutStatus!]
}

input NestedEnumWorkoutTypeFilter {
  equals: WorkoutType
  in: [WorkoutType!]
  not: NestedEnumWorkoutTypeFilter
  notIn: [WorkoutType!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  allUsers: [User]
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String
  id: Int!
  image: String
  left: Int
  name: String
}

input UserCreateInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  left: Int
  name: String
  updatedAt: DateTime
  Workout: WorkoutCreateManyWithoutTraineesInput
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  left: NullableIntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Workout: WorkoutUpdateManyWithoutTraineesInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  left: NullableIntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  left: IntNullableFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  updatedAt: DateTimeFilter
  Workout: WorkoutListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Workout {
  id: Int!
  status: WorkoutStatus!
  trainees(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  type: WorkoutType!
}

input WorkoutCreateManyWithoutTraineesInput {
  connect: [WorkoutWhereUniqueInput!]
  connectOrCreate: [WorkoutCreateOrConnectWithouttraineesInput!]
  create: [WorkoutCreateWithoutTraineesInput!]
}

input WorkoutCreateOrConnectWithouttraineesInput {
  create: WorkoutCreateWithoutTraineesInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutCreateWithoutTraineesInput {
  date: DateTime
  status: WorkoutStatus!
  type: WorkoutType!
}

input WorkoutListRelationFilter {
  every: WorkoutWhereInput
  none: WorkoutWhereInput
  some: WorkoutWhereInput
}

input WorkoutScalarWhereInput {
  AND: [WorkoutScalarWhereInput!]
  date: DateTimeFilter
  id: IntFilter
  NOT: [WorkoutScalarWhereInput!]
  OR: [WorkoutScalarWhereInput!]
  status: EnumWorkoutStatusFilter
  type: EnumWorkoutTypeFilter
}

enum WorkoutStatus {
  Active
  Cancelled
  Over
}

enum WorkoutType {
  PERSONAL
  TEAM
}

input WorkoutUpdateManyMutationInput {
  date: DateTimeFieldUpdateOperationsInput
  status: EnumWorkoutStatusFieldUpdateOperationsInput
  type: EnumWorkoutTypeFieldUpdateOperationsInput
}

input WorkoutUpdateManyWithoutTraineesInput {
  connect: [WorkoutWhereUniqueInput!]
  connectOrCreate: [WorkoutCreateOrConnectWithouttraineesInput!]
  create: [WorkoutCreateWithoutTraineesInput!]
  delete: [WorkoutWhereUniqueInput!]
  deleteMany: [WorkoutScalarWhereInput!]
  disconnect: [WorkoutWhereUniqueInput!]
  set: [WorkoutWhereUniqueInput!]
  update: [WorkoutUpdateWithWhereUniqueWithoutTraineesInput!]
  updateMany: [WorkoutUpdateManyWithWhereWithoutTraineesInput!]
  upsert: [WorkoutUpsertWithWhereUniqueWithoutTraineesInput!]
}

input WorkoutUpdateManyWithWhereWithoutTraineesInput {
  data: WorkoutUpdateManyMutationInput!
  where: WorkoutScalarWhereInput!
}

input WorkoutUpdateWithoutTraineesInput {
  date: DateTimeFieldUpdateOperationsInput
  status: EnumWorkoutStatusFieldUpdateOperationsInput
  type: EnumWorkoutTypeFieldUpdateOperationsInput
}

input WorkoutUpdateWithWhereUniqueWithoutTraineesInput {
  data: WorkoutUpdateWithoutTraineesInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutUpsertWithWhereUniqueWithoutTraineesInput {
  create: WorkoutCreateWithoutTraineesInput!
  update: WorkoutUpdateWithoutTraineesInput!
  where: WorkoutWhereUniqueInput!
}

input WorkoutWhereInput {
  AND: [WorkoutWhereInput!]
  date: DateTimeFilter
  id: IntFilter
  NOT: [WorkoutWhereInput!]
  OR: [WorkoutWhereInput!]
  status: EnumWorkoutStatusFilter
  trainees: UserListRelationFilter
  type: EnumWorkoutTypeFilter
}

input WorkoutWhereUniqueInput {
  id: Int
}
